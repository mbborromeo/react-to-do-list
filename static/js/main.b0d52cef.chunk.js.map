{"version":3,"sources":["services/DataService.js","components/List/AddForm/AddForm.js","components/List/List.js","components/Detail/Detail.js","App.js","index.js"],"names":["API_BASE","DataService","axios","jsonp","timeout","idx","AddForm","addFunction","useState","newItem","setNewItem","handleSubmit","useCallback","e","preventDefault","onSubmit","type","placeholder","value","onChange","target","onClick","List","undefined","list","setList","key","direction","sortConfig","setSortConfig","hasError","setHasError","dataService","useMemo","getArrayIndexOfItem","id","findIndex","element","completeToDo","indexOfItem","copyOfList","completed","deleteToDo","filteredList","filter","elem","getMaxID","sorted","map","item","sort","a","b","length","addToDo","text","newListItem","userId","title","newList","requestSort","useEffect","getList","then","response","catch","error","console","finally","sortedResults","sortedList","className","to","data-id","aria-label","Detail","match","detail","setDetail","loaded","setLoaded","detailID","params","getDetail","log","Object","keys","toString","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0d52cef.chunk.js","sourcesContent":["// import React from 'react';\r\n// import axios from 'axios';\r\nimport axios from 'axios-jsonp-pro';\r\n\r\nconst API_BASE = 'https://jsonplaceholder.typicode.com/todos';\r\n\r\nclass DataService {\r\n  getList() {\r\n    // return axios.get( ... );\r\n    return axios.jsonp(\r\n      API_BASE,\r\n      {\r\n        timeout: 2000\r\n      }\r\n    );\r\n  }\r\n\r\n  getDetail(idx) {\r\n    return axios.jsonp(\r\n      `${API_BASE}/${idx}`,\r\n      {\r\n        timeout: 2000\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataService;\r\n","import React, { useState, useCallback } from 'react';\r\n\r\nfunction AddForm({ addFunction }) {\r\n  const [newItem, setNewItem] = useState('');\r\n\r\n  const handleSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n\r\n      if (!newItem) {\r\n        return; // exit if field empty\r\n      }\r\n\r\n      addFunction(newItem);\r\n      setNewItem(''); // reset field to empty\r\n    },\r\n    [newItem, addFunction]\r\n  );\r\n\r\n  /*\r\n  const handleBlur = (e) => {\r\n        // click on Submit/Add button\r\n        if( e.target ... ){\r\n            e.preventDefault();\r\n        } else {\r\n            setNewItem('')\r\n        }\r\n  };\r\n  */\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type item\"\r\n        value={newItem}\r\n        onChange={(e) => setNewItem(e.target.value)}\r\n      />\r\n      <button type=\"submit\">Add</button>\r\n      <input\r\n        type=\"button\"\r\n        value=\"Clear\"\r\n        onClick={() => setNewItem('')}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddForm;\r\n","import React, {\r\n  useState, useEffect, useMemo, useCallback\r\n} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport DataService from '../../services/DataService';\r\nimport AddForm from './AddForm/AddForm';\r\nimport './List.css';\r\n\r\nfunction List() {\r\n  const [list, setList] = useState(undefined); // []\r\n  const [sortConfig, setSortConfig] = useState({ key: 'id', direction: 'ascending' });\r\n  const [hasError, setHasError] = useState(false);\r\n\r\n  // save a memoized copy of the function for re-use instead of creating a new function each time\r\n  const dataService = useMemo(\r\n    () => new DataService(),\r\n    []\r\n  );\r\n\r\n  const getArrayIndexOfItem = useCallback(\r\n    (id) => {\r\n      const isItemOfInterest = (element) => element.id === id;\r\n      return list.findIndex(isItemOfInterest);\r\n    },\r\n    [list]\r\n  );\r\n\r\n  // Reference: https://www.digitalocean.com/community/tutorials/how-to-build-a-react-to-do-app-with-react-hooks\r\n  const completeToDo = useCallback(\r\n    (id) => {\r\n      const indexOfItem = getArrayIndexOfItem(id);\r\n      const copyOfList = [...list];\r\n\r\n      if (!copyOfList[indexOfItem].completed) {\r\n        copyOfList[indexOfItem].completed = true;\r\n      } else {\r\n        copyOfList[indexOfItem].completed = false;\r\n      }\r\n\r\n      setList(copyOfList);\r\n    },\r\n    [list, getArrayIndexOfItem] // dependencies that require a re-render for\r\n  );\r\n\r\n  const deleteToDo = useCallback(\r\n    (id) => {\r\n      const indexOfItem = getArrayIndexOfItem(id);\r\n\r\n      // const copyOfList = [...list];\r\n      // copyOfList.splice(indexOfItem, 1);\r\n      const filteredList = list.filter((elem) => elem.id !== id);\r\n\r\n      setList(filteredList); // copyOfList\r\n    },\r\n    [list, getArrayIndexOfItem] // dependencies that require a re-render for\r\n  );\r\n\r\n  // Reference: https://www.danvega.dev/blog/2019/03/14/find-max-array-objects-javascript\r\n  const getMaxID = useCallback(\r\n    () => {\r\n      const ids = list.map((item) => item.id);\r\n      const sorted = ids.sort((a, b) => a - b); // sort ascending order\r\n      return sorted[sorted.length - 1];\r\n    },\r\n    [list]\r\n  );\r\n\r\n  const addToDo = useCallback(\r\n    (text) => {\r\n      const newListItem = {\r\n        userId: 99, // default user\r\n        id: getMaxID() + 1,\r\n        completed: false,\r\n        title: text\r\n      };\r\n\r\n      const newList = [...list, newListItem]; // add new item to end of list\r\n      setList(newList);\r\n    },\r\n    [list, getMaxID]\r\n  );\r\n\r\n  /*\r\n    const editToDo = (index, text) => {\r\n        const copyOfList = [...list];\r\n        copyOfList[index].title = text;\r\n        setList(copyOfList);\r\n    };\r\n    */\r\n\r\n  // Reference: https://www.smashingmagazine.com/2020/03/sortable-tables-react/\r\n  const requestSort = useCallback(\r\n    (key) => {\r\n      let direction;\r\n\r\n      // if requested key is same as current key\r\n      if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n        direction = 'descending';\r\n      } else {\r\n        direction = 'ascending'; // by default\r\n      }\r\n\r\n      // set to new key and direction\r\n      setSortConfig({ key, direction });\r\n    },\r\n    [sortConfig] // dependencies that require a re-render for\r\n  );\r\n\r\n  useEffect(() => {\r\n    dataService.getList()\r\n      .then((response) => {\r\n        // handle success\r\n        setList(response);\r\n      })\r\n      .catch((error) => {\r\n        // handle error\r\n        console.error('axios.jsonp CATCH', error);\r\n        setHasError(true);\r\n      })\r\n      .finally(() => {\r\n        // always executed\r\n      });\r\n  },\r\n  [dataService]);\r\n\r\n  // sort list\r\n  const sortedResults = useMemo(\r\n    () => {\r\n      if (list) {\r\n        const sortedList = [...list];\r\n\r\n        sortedList.sort((a, b) => {\r\n          if (a[sortConfig.key] < b[sortConfig.key]) {\r\n            if (sortConfig.key === 'completed') { // completed has reversed order\r\n              return sortConfig.direction === 'ascending' ? 1 : -1;\r\n            }\r\n            return sortConfig.direction === 'ascending' ? -1 : 1;\r\n          }\r\n          if (a[sortConfig.key] > b[sortConfig.key]) {\r\n            if (sortConfig.key === 'completed') { // completed has reversed order\r\n              return sortConfig.direction === 'ascending' ? -1 : 1;\r\n            }\r\n            return sortConfig.direction === 'ascending' ? 1 : -1;\r\n          }\r\n\r\n          // then sort by ID as well\r\n          if (a.id < b.id) {\r\n            return -1;\r\n          }\r\n          if (a.id > b.id) {\r\n            return 1;\r\n          }\r\n\r\n          return 0;\r\n        });\r\n\r\n        return sortedList;\r\n      }\r\n      return undefined;\r\n    },\r\n    [list, sortConfig]\r\n  );\r\n  \r\n  // possibly use useMemo here, and/or define a function for sort\r\n  if (sortedResults) {\r\n    if (sortedResults.length > 0) {\r\n      // render DOM\r\n      return (\r\n        <div>\r\n          <div id=\"header\">\r\n            <h1>TO DO</h1>\r\n            <AddForm addFunction={addToDo} />\r\n          </div>\r\n\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={sortConfig.key === 'id' ? sortConfig.direction : ''}\r\n                    onClick={() => requestSort('id')}\r\n                  >\r\n                    ID\r\n                  </button>\r\n                </th>\r\n                <th>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={sortConfig.key === 'title' ? sortConfig.direction : ''}\r\n                    onClick={() => requestSort('title')}\r\n                  >\r\n                    Title\r\n                  </button>\r\n                </th>\r\n                <th>\r\n                  <button\r\n                    type=\"button\"\r\n                    id=\"completed\"\r\n                    className={sortConfig.key === 'completed' ? sortConfig.direction : ''}\r\n                    onClick={() => requestSort('completed')}\r\n                  >\r\n                    Completed\r\n                  </button>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                sortedResults.map((item) => (\r\n                  <tr key={item.id}>\r\n                    <td>\r\n                      <Link\r\n                        to={`/detail/${item.id}`}\r\n                        data-id={item.id}\r\n                        className={item.completed ? 'completed' : ''}\r\n                      >\r\n                        { item.id }\r\n                      </Link>\r\n                    </td>\r\n                    <td>\r\n                      <Link\r\n                        to={`/detail/${item.id}`}\r\n                        data-id={item.id}\r\n                        className={item.completed ? 'completed' : ''}\r\n                      >\r\n                        { item.title }\r\n                      </Link>\r\n                    </td>\r\n                    <td>\r\n                      <button type=\"button\" \r\n                        onClick={() => completeToDo(item.id)}\r\n                        className={item.completed ? 'strikethrough' : ''}\r\n                      >\r\n                        {item.completed ? 'To Do' : 'Done'}\r\n                      </button>\r\n                      <button type=\"button\" aria-label={`Delete item ${item.id}`} onClick={() => deleteToDo(item.id)}>X</button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n    return <div>No results to display</div>;\r\n  }\r\n  if (hasError) { // finished loading, but has error\r\n    return <div>Error loading</div>;\r\n  }\r\n  return <div>Loading...</div>;\r\n}\r\n\r\nexport default List;\r\n","import React, {\r\n  useState, useEffect, useMemo, useCallback\r\n} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport DataService from '../../services/DataService';\r\nimport '../../App.css';\r\n\r\nfunction Detail({ match }) {  \r\n  const [detail, setDetail] = useState({});\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [hasError, setHasError] = useState(false);\r\n  const detailID = match.params.id;\r\n\r\n  // save a memoized copy of the function for re-use instead of creating a new function each time\r\n  const dataService = useMemo(\r\n    () => new DataService(),\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (detailID) {\r\n      dataService.getDetail(detailID)\r\n        .then((response) => {\r\n          // handle success\r\n          console.log('getDetail response', response)\r\n          setDetail(response);\r\n          setLoaded(true);\r\n        })\r\n        .catch((error) => {\r\n          // handle error\r\n          console.error('axios.jsonp CATCH', error);\r\n          setHasError(true);\r\n        })\r\n        .finally(() => {\r\n          // always executed\r\n        });\r\n    }\r\n  },\r\n  [dataService, detailID]);\r\n\r\n  if (loaded && Object.keys(detail).length > 0) {\r\n    return (\r\n      <div>\r\n        <span id=\"id\">\r\n          ID:\r\n          {' '}\r\n          { detailID }\r\n        </span>\r\n        <br />\r\n\r\n        <span id=\"title\">\r\n          Title:\r\n          {' '}\r\n          { detail.title }\r\n        </span>\r\n        <br />\r\n        \r\n        <span id=\"completed\">\r\n          Completed:\r\n          {' '}\r\n          { detail.completed.toString() }\r\n        </span>\r\n\r\n        <br />\r\n        <br />\r\n        <Link\r\n          to=\"/\"\r\n          className=\"button back\"\r\n        >\r\n          &lt; Back\r\n        </Link>\r\n      </div>\r\n    );\r\n  } if (loaded && Object.keys(detail).length === 0) {\r\n    return <div>No detail to display</div>;\r\n  } if (hasError) {\r\n    return <div>Error loading</div>;\r\n  }\r\n  return <div>Loading...</div>;\r\n}\r\n\r\nexport default Detail;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'; // Redirect,\r\nimport List from './components/List/List';\r\nimport Detail from './components/Detail/Detail';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            component={List}\r\n          />\r\n\r\n          <Route\r\n            path=\"/detail/:id\"\r\n            exact\r\n            component={Detail}\r\n          />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />, // </React.StrictMode>\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}