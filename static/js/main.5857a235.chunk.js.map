{"version":3,"sources":["services/DataService.js","components/List/AddForm/AddForm.js","components/List/List.js","components/Detail/Detail.js","App.js","index.js"],"names":["API_BASE","DataService","axios","jsonp","timeout","idx","AddForm","addFunction","useState","newItem","setNewItem","handleSubmit","useCallback","e","preventDefault","type","value","onChange","target","onClick","List","undefined","list","setList","key","direction","sortConfig","setSortConfig","hasError","setHasError","console","log","dataService","useMemo","getArrayIndexOfItem","id","findIndex","element","completeToDo","indexOfItem","copyOfList","completed","deleteToDo","filteredList","filter","elem","getMaxID","sorted","map","item","sort","a","b","length","addToDo","text","newListItem","userId","title","newList","requestSort","useEffect","getList","then","response","catch","error","finally","sortedResults","sortedList","className","to","data-id","Detail","match","detailID","setDetailID","detail","setDetail","loaded","setLoaded","getID","params","getDetail","Object","keys","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5857a235.chunk.js","sourcesContent":["// import React from 'react';\r\n// import axios from 'axios';\r\nimport axios from 'axios-jsonp-pro';\r\n\r\nconst API_BASE = 'https://jsonplaceholder.typicode.com/todos';\r\n\r\nclass DataService {\r\n  getList() {\r\n    // return axios.get( ... );\r\n    return axios.jsonp(\r\n      API_BASE,\r\n      {\r\n        timeout: 2000\r\n      }\r\n    );\r\n  }\r\n\r\n  getDetail(idx) {\r\n    return axios.jsonp(\r\n      `${API_BASE}/${idx}`,\r\n      {\r\n        timeout: 2000\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataService;\r\n","import React, { useState, useCallback } from 'react';\r\n\r\nfunction AddForm({ addFunction }) {\r\n  const [newItem, setNewItem] = useState('');\r\n\r\n  const handleSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n\r\n      if (!newItem) {\r\n        return; // exit if field empty\r\n      }\r\n\r\n      addFunction(newItem);\r\n      setNewItem(''); // reset field to empty\r\n    },\r\n    [newItem, addFunction]\r\n  );\r\n\r\n  /*\r\n  const handleBlur = (e) => {\r\n        // click on Submit/Add button\r\n        if( e.target ... ){\r\n            e.preventDefault();\r\n        } else {\r\n            setNewItem('')\r\n        }\r\n  };\r\n  */\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        value={newItem}\r\n        onChange={(e) => setNewItem(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"submit\"\r\n        value=\"Add\"\r\n        onClick={handleSubmit}\r\n      />\r\n      <input\r\n        type=\"button\"\r\n        value=\"Clear\"\r\n        onClick={() => setNewItem('')}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddForm;\r\n","import React, {\r\n  useState, useEffect, useMemo, useCallback\r\n} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport DataService from '../../services/DataService';\r\nimport AddForm from './AddForm/AddForm';\r\nimport './List.css';\r\n\r\nfunction List() {\r\n  const [list, setList] = useState(undefined); // []\r\n  const [sortConfig, setSortConfig] = useState({ key: 'id', direction: 'ascending' });\r\n  const [hasError, setHasError] = useState(false);\r\n  console.log('list state', list);\r\n\r\n  // save a memoized copy of the function for re-use instead of creating a new function each time\r\n  const dataService = useMemo(\r\n    () => new DataService(),\r\n    []\r\n  );\r\n\r\n  const getArrayIndexOfItem = useCallback(\r\n    (id) => {\r\n      const isItemOfInterest = (element) => element.id === id;\r\n      return list.findIndex(isItemOfInterest);\r\n    },\r\n    [list]\r\n  );\r\n\r\n  // Reference: https://www.digitalocean.com/community/tutorials/how-to-build-a-react-to-do-app-with-react-hooks\r\n  const completeToDo = useCallback(\r\n    (id) => {\r\n      console.log('completeToDo id', id);\r\n      const indexOfItem = getArrayIndexOfItem(id);\r\n      console.log('completeToDo indexOfItem', indexOfItem);\r\n\r\n      const copyOfList = [...list];\r\n\r\n      if (!copyOfList[indexOfItem].completed) {\r\n        copyOfList[indexOfItem].completed = true;\r\n      } else {\r\n        copyOfList[indexOfItem].completed = false;\r\n      }\r\n\r\n      setList(copyOfList);\r\n    },\r\n    [list, getArrayIndexOfItem] // dependencies that require a re-render for\r\n  );\r\n\r\n  const deleteToDo = useCallback(\r\n    (id) => {\r\n      console.log('deleteToDo id', id);\r\n      const indexOfItem = getArrayIndexOfItem(id);\r\n      console.log('deleteToDo indexOfItem', indexOfItem);\r\n\r\n      // const copyOfList = [...list];\r\n      // copyOfList.splice(indexOfItem, 1);\r\n      const filteredList = list.filter((elem) => elem.id !== id);\r\n\r\n      setList(filteredList); // copyOfList\r\n    },\r\n    [list, getArrayIndexOfItem] // dependencies that require a re-render for\r\n  );\r\n\r\n  // Reference: https://www.danvega.dev/blog/2019/03/14/find-max-array-objects-javascript\r\n  const getMaxID = useCallback(\r\n    () => {\r\n      const ids = list.map((item) => item.id);\r\n      const sorted = ids.sort((a, b) => a - b); // sort ascending order\r\n      return sorted[sorted.length - 1];\r\n    },\r\n    [list]\r\n  );\r\n\r\n  const addToDo = useCallback(\r\n    (text) => {\r\n      const newListItem = {\r\n        userId: 99, // default user\r\n        id: getMaxID() + 1,\r\n        completed: false,\r\n        title: text\r\n      };\r\n\r\n      const newList = [...list, newListItem]; // add new item to end of list\r\n      setList(newList);\r\n    },\r\n    [list, getMaxID]\r\n  );\r\n\r\n  /*\r\n    const editToDo = (index, text) => {\r\n        const copyOfList = [...list];\r\n        copyOfList[index].title = text;\r\n        setList(copyOfList);\r\n    };\r\n    */\r\n\r\n  // Reference: https://www.smashingmagazine.com/2020/03/sortable-tables-react/\r\n  const requestSort = useCallback(\r\n    (key) => {\r\n      let direction;\r\n\r\n      // if requested key is same as current key\r\n      if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n        direction = 'descending';\r\n      } else {\r\n        direction = 'ascending'; // by default\r\n      }\r\n\r\n      // set to new key and direction\r\n      setSortConfig({ key, direction });\r\n    },\r\n    [sortConfig] // dependencies that require a re-render for\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log('List useEffect');\r\n\r\n    dataService.getList()\r\n      .then((response) => {\r\n        // handle success\r\n        setList(response);\r\n      })\r\n      .catch((error) => {\r\n        // handle error\r\n        console.error('axios.jsonp CATCH', error);\r\n        setHasError(true);\r\n      })\r\n      .finally(() => {\r\n        // always executed\r\n      });\r\n  },\r\n  [dataService]);\r\n\r\n  // sort list\r\n  const sortedResults = useMemo(\r\n    () => {\r\n      if (list) {\r\n        console.log('sorting...');\r\n        const sortedList = [...list];\r\n\r\n        sortedList.sort((a, b) => {\r\n          if (a[sortConfig.key] < b[sortConfig.key]) {\r\n            if (sortConfig.key === 'completed') { // completed has reversed order\r\n              return sortConfig.direction === 'ascending' ? 1 : -1;\r\n            }\r\n            return sortConfig.direction === 'ascending' ? -1 : 1;\r\n          }\r\n          if (a[sortConfig.key] > b[sortConfig.key]) {\r\n            if (sortConfig.key === 'completed') { // completed has reversed order\r\n              return sortConfig.direction === 'ascending' ? -1 : 1;\r\n            }\r\n            return sortConfig.direction === 'ascending' ? 1 : -1;\r\n          }\r\n\r\n          // then sort by ID as well\r\n          if (a.id < b.id) {\r\n            return -1;\r\n          }\r\n          if (a.id > b.id) {\r\n            return 1;\r\n          }\r\n\r\n          return 0;\r\n        });\r\n\r\n        return sortedList;\r\n      }\r\n      return undefined;\r\n    },\r\n    [list, sortConfig]\r\n  );\r\n\r\n  console.log('sortedResults', sortedResults);\r\n\r\n  // possibly use useMemo here, and/or define a function for sort\r\n  if (sortedResults) {\r\n    if (sortedResults.length > 0) {\r\n      // render DOM\r\n      return (\r\n        <div>\r\n          <h1>TO DO</h1>\r\n\r\n          <AddForm addFunction={addToDo} />\r\n\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <td>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={sortConfig.key === 'id' ? sortConfig.direction : ''}\r\n                    onClick={() => requestSort('id')}\r\n                  >\r\n                    ID\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={sortConfig.key === 'title' ? sortConfig.direction : ''}\r\n                    onClick={() => requestSort('title')}\r\n                  >\r\n                    Title\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    type=\"button\"\r\n                    id=\"completed\"\r\n                    className={sortConfig.key === 'completed' ? sortConfig.direction : ''}\r\n                    onClick={() => requestSort('completed')}\r\n                  >\r\n                    Completed\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                sortedResults.map((item) => (\r\n                  <tr key={item.id}>\r\n                    <td>\r\n                      <Link\r\n                        to={`/detail/${item.id}`}\r\n                        data-id={item.id}\r\n                        className={item.completed ? 'completed' : ''}\r\n                      >\r\n                        { item.id }\r\n                      </Link>\r\n                    </td>\r\n                    <td>\r\n                      <Link\r\n                        to={`/detail/${item.id}`}\r\n                        data-id={item.id}\r\n                        className={item.completed ? 'completed' : ''}\r\n                      >\r\n                        { item.title }\r\n                      </Link>\r\n                    </td>\r\n                    <td>\r\n                      <button type=\"button\" onClick={() => completeToDo(item.id)}>\r\n                        { item.completed ? 'Mark as Incomplete' : 'Mark as Completed' }\r\n                      </button>\r\n                      <button type=\"button\" onClick={() => deleteToDo(item.id)}>X</button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n    return <div>No results to display</div>;\r\n  }\r\n  if (hasError) { // finished loading, but has error\r\n    return <div>Error loading</div>;\r\n  }\r\n  return <div>Loading...</div>;\r\n}\r\n\r\nexport default List;\r\n","import React, {\r\n  useState, useEffect, useMemo, useCallback\r\n} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport DataService from '../../services/DataService';\r\nimport '../../App.css';\r\n\r\nfunction Detail({ match }) {\r\n  const [detailID, setDetailID] = useState(undefined);\r\n  const [detail, setDetail] = useState({});\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [hasError, setHasError] = useState(false);\r\n\r\n  // save a memoized copy of the function for re-use instead of creating a new function each time\r\n  const dataService = useMemo(\r\n    () => new DataService(),\r\n    []\r\n  );\r\n\r\n  // when you wrap a useCallback() hook around a function, the function inside it doesn't re-render\r\n  const getID = useCallback(\r\n    () => match.params.id,\r\n    [match.params.id] // dependencies that require a re-render for\r\n  );\r\n\r\n  useEffect(() => {\r\n    setDetailID(getID());\r\n\r\n    if (detailID) {\r\n      dataService.getDetail(detailID)\r\n        .then((response) => {\r\n          // handle success\r\n          setDetail(response);\r\n          setLoaded(true);\r\n        })\r\n        .catch((error) => {\r\n          // handle error\r\n          console.error('axios.jsonp CATCH', error);\r\n          setHasError(true);\r\n        })\r\n        .finally(() => {\r\n          // always executed\r\n        });\r\n    }\r\n  },\r\n  [dataService, detailID, getID]);\r\n\r\n  if (loaded && Object.keys(detail).length > 0) {\r\n    return (\r\n      <div>\r\n        <span>\r\n          Detail\r\n          {' '}\r\n          { detailID }\r\n          for\r\n          {' '}\r\n          { detail.title }\r\n          is\r\n          {' '}\r\n          { detail.completed }\r\n        </span>\r\n\r\n        <br />\r\n        <br />\r\n        <Link\r\n          to=\"/\"\r\n          className=\"button back\"\r\n        >\r\n          &lt; Back\r\n        </Link>\r\n      </div>\r\n    );\r\n  } if (loaded && Object.keys(detail).length === 0) {\r\n    return <div>No detail to display</div>;\r\n  } if (hasError) {\r\n    return <div>Error loading</div>;\r\n  }\r\n  return <div>Loading...</div>;\r\n}\r\n\r\nexport default Detail;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'; // Redirect,\r\nimport List from './components/List/List';\r\nimport Detail from './components/Detail/Detail';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            component={List}\r\n          />\r\n\r\n          <Route\r\n            path=\"/detail/:id\"\r\n            exact\r\n            component={Detail}\r\n          />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />, // </React.StrictMode>\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}